#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/database'

options = {}

parser = OptionParser.new do |parser|
  parser.on('-s', '--start TASK', 'Starts a new task and logs the time that it begun')
  parser.on('-w', '--working TASK', 'Sinalizes that you resumed working on an existing task')
  parser.on('-p', '--pause TASK', 'Sinalizes that you paused the work on an existing task and logs the time since the last "--working" punch')
  parser.on('-t', '--total TASK', 'Shows the total time spent on an existing task')
  parser.on('-l', '--list', 'Lists all your saved tasks')
  parser.on('-d', '--delete TASK', 'Deletes an existing task')

  parser.on('-h', '--help', 'Prints this help') do
    puts parser
    exit
  end
end

parser.parse! into: options

if options.empty?
  puts 'You have to give me something!!!'
  exit
end

#  The 'working' flag prevents the user from starting to work on a task that wasn't paused
# and pausing the work on a task that is already on pause
def check_working(task)
  DataBase.working? task
end

command = options.first
case command[0]
when :start
  puts DataBase.add_task command[1], Time.now.to_f
when :pause
  puts check_working(command[1]) ? DataBase.paused_working(command[1], Time.now.to_f) : 'Already on pause'
when :working
  puts check_working(command[1]) ? "Already working on #{command[1]}" : DataBase.resumed_working(command[1], Time.now.to_f)
when :total
  total_time = DataBase.get_total_time_spent command[1]
  # Converts the float number into a more readable format 00h 00m
  puts total_time.class == String ? total_time : Time.at(total_time).utc.strftime('%Hh %Mm')
when :list
  tasks = DataBase.list
  unless tasks.empty?
    tasks.each do |task|
      puts "#{task[0]} \t| #{Time.at(task[1]).utc.strftime('%Hh %Mm')}"
    end
  else
    puts 'No task found'
  end
when :delete
  puts DataBase.delete_task command[1]
else
  puts 'Command not found'
end
